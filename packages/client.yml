substitutions:
  ble_mac_address: !secret ble_mac_address
  tesla_vin: !secret tesla_vin
  charging_amps_max: "32"

ble_client:
  - mac_address: $ble_mac_address
    id: ble_tesla_id

tesla_ble_vehicle:
  ble_client_id: ble_tesla_id
  id: tesla_ble_vehicle_id
  vin: $tesla_vin
  update_interval: 1min # default
  is_asleep:
    name: "Asleep"
  is_user_present:
    name: "User presence"
  is_unlocked:
    name: "Doors"
  is_charge_flap_open:
    name: "Charge flap"
  private_key: !secret tesla_private_key_b64
  http_proxy_enabled: True
  http_proxy_port: 8899 # Adjust port if needed

button:
  - platform: template
    id: ble_pair
    name: Pair BLE key
    icon: mdi:key-wireless
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->startPair();
    entity_category: diagnostic

  - platform: template
    name: Wake up
    icon: mdi:sleep-off
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->wakeVehicle();

  - platform: template
    name: Regenerate key
    icon: mdi:key-change
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->regenerateKey();
    entity_category: diagnostic
    disabled_by_default: true

  - platform: template
    name: Force data update
    icon: mdi:database-sync
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->enqueueVCSECInformationRequest(true);
    entity_category: diagnostic

  - platform: template
    name: "Honk"
    id: honk_button
    on_press:
      lambda: 'id(tesla_ble_vehicle_id).queue_command((UniversalMessage_Domain)2, "honk_horn");' # Infotainment = 2

  - platform: template
    name: "Wake Up"
    id: wake_up_button
    on_press:
      lambda: 'id(tesla_ble_vehicle_id).queue_command((UniversalMessage_Domain)1, "wake_up");' # VCSEC = 1

sensor:
  - platform: ble_client
    type: rssi
    ble_client_id: ble_tesla_id
    name: "BLE Signal"
    icon: mdi:bluetooth
    update_interval: 60s
    entity_category: diagnostic

switch:
  - platform: ble_client
    ble_client_id: ble_tesla_id
    name: "BLE Connection"
    entity_category: diagnostic

  - platform: template
    name: "Charge Switch"
    id: charge_switch
    # Assuming charge start/stop is infotainment domain (check TeslaBLE docs)
    # Use integer value for domain: UniversalMessage_Domain_DOMAIN_INFOTAINMENT = 2
    turn_on_action:
      lambda: 'id(tesla_ble_vehicle_id).queue_command((UniversalMessage_Domain)2, "start_charging");'
    turn_off_action:
      lambda: 'id(tesla_ble_vehicle_id).queue_command((UniversalMessage_Domain)2, "stop_charging");'

number:
  - platform: template
    name: "Charging Amps"
    id: charging_amps
    min_value: 0 # Check min/max based on Tesla capabilities
    max_value: 32 # Check min/max based on Tesla capabilities
    step: 1
    unit_of_measurement: "A"
    mode: box
    # Assuming set amps is infotainment domain (check TeslaBLE docs)
    # Use integer value for domain: UniversalMessage_Domain_DOMAIN_INFOTAINMENT = 2
    set_action:
      # TODO: The set_charging_amps command likely needs the value (x) passed.
      # The queue_command needs to be adapted or a new specific method added.
      # Placeholder for now:
      lambda: 'ESP_LOGW("set_amps", "Setting amps via lambda not fully implemented yet. Value: %f", x); id(tesla_ble_vehicle_id).queue_command((UniversalMessage_Domain)2, "set_charging_amps");'

  - platform: template
    name: "Charge Limit"
    id: charge_limit
    min_value: 50 # Common min limit
    max_value: 100 # Max limit
    step: 1
    unit_of_measurement: "%"
    mode: slider
    # Assuming set limit is infotainment domain (check TeslaBLE docs)
    # Use integer value for domain: UniversalMessage_Domain_DOMAIN_INFOTAINMENT = 2
    set_action:
      # TODO: The set_charge_limit command likely needs the value (x) passed.
      # The queue_command needs to be adapted or a new specific method added.
      # Placeholder for now:
      lambda: 'ESP_LOGW("set_limit", "Setting limit via lambda not fully implemented yet. Value: %f", x); id(tesla_ble_vehicle_id).queue_command((UniversalMessage_Domain)2, "set_charge_limit");'

lock:
  - platform: template
    name: "Doors"
    id: door_lock
    # RKE actions are VCSEC domain = 1
    lock_action:
      lambda: 'id(tesla_ble_vehicle_id).queue_rke_action((VCSEC_RKEAction_E)0, "lock");' # LOCK = 0
    unlock_action:
      lambda: 'id(tesla_ble_vehicle_id).queue_rke_action((VCSEC_RKEAction_E)1, "unlock");' # UNLOCK = 1
